
//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

// pallets/pallet-por/src/weights.rs
// pallets/pallet-por/src/weights.rs
#![allow(clippy::unused_unit)]

use frame_support::traits::Get;
use frame_support::weights::{constants::RocksDbWeight, Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
    fn do_something() -> Weight;
    fn cause_error() -> Weight;
}

/// Generic weights (recommended in runtime):
///   type WeightInfo = pallet_template::weights::SubstrateWeight<Self>;
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn do_something() -> Weight {
        // Placeholder exec time + 1 DB write. Replace via FRAME benchmarks.
        Weight::from_parts(10_000, 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn cause_error() -> Weight {
        // Placeholder exec time; adjust if you write storage here.
        Weight::from_parts(10_000, 0)
    }
}

/// Fallback weights used if runtime sets `type WeightInfo = ();`
impl WeightInfo for () {
    fn do_something() -> Weight {
        Weight::from_parts(10_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn cause_error() -> Weight {
        Weight::from_parts(10_000, 0)
    }
}


